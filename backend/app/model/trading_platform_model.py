# generated by datamodel-codegen:
#   filename:  openapi3_0.yaml
#   timestamp: 2024-05-15T07:54:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, ConfigDict, confloat


class OrderBaseModel(BaseModel):
    model_config = ConfigDict(
        use_enum_values=True,
    )


class OrderInput(OrderBaseModel):
    stocks: str = Field(
        ..., description="Currency pair symbol (e.g. 'EURUSD'), or any other stuff"
    )
    quantity: confloat(gt=0.0) = Field(
        ..., description='Quantity of the currency pair to be traded'
    )


class OrderStatus(Enum):
    pending = 'pending'
    executed = 'executed'
    cancelled = 'cancelled'


class OrderOutput(OrderBaseModel):
    id: str = Field(..., description='Unique identifier for the order')
    stocks: str = Field(..., description="Currency pair symbol (e.g. 'EURUSD')")
    quantity: float = Field(..., description='Quantity of the currency pair to be traded')
    status: OrderStatus = Field(..., description='Status of the order')


class Error(OrderBaseModel):
    code: int | None = Field(None, description='Error code')
    message: str = Field(..., description='Error message')


class RequestError(Error):
    input: Any | None = Field(None, description='Input data')
    localization: list[Any] = Field(default_factory=list, description='Path to invalid field')
    type: str = Field(..., description='Type of error occurrence')
